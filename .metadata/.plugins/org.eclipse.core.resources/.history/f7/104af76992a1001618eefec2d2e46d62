package chopLifter;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;

import javax.swing.JPanel;

abstract public class GameObj extends JPanel {
	public static int ST_DEATH = 0;
	public static int ST_ALIVE = 1;
	public static int ST_BLAST = 2;

	public static int GO_RIGHT = 3;
	public static int GO_LEFT = 4;
	public static int GO_UP = 5;
	public static int GO_DOWN = 6;

	Image image; // 게임 객체 이미지
	int state; // 게임 객체 상태
	double tmpX;
	double x, y, dx, dy; // 게임 객체 위치
	int width, height, degree; // 게임 객체 크기
	int blast_count; // 폭발 카운트

	int directionX; // 방향을 나타낼 변수.
	int directionY; // 방향을 나타낼 변수.

	int getState() {
		return state;
	} // 상태 확인

	// double getX() {
	// return x;
	// } // 가로 위치 확인
	//
	// double getY() {
	// return y;
	// } // 세로 위치 확인

	public int getX() {
		return (int) x;
	}

	public int getY() {
		return (int) y;
	}

	double getLeftX() {
		return x - width;
	}

	double getLeftY() {
		return y - height;
	}

	void setLeftXPlus(double px) {
		tmpX = px;
	}

	void setLeftXMinus(double mx) {
		tmpX = -mx;
	}

	// 이미지 출력
	void drawImage(Graphics g) {
		g.drawImage(image, (int) ((x - width / 2) + tmpX), (int) (y - height / 2), width, height, null);
	}

	// 폭발 이미지 출력
	void drawBlast(Graphics g) {
		// blast_count 개수 만큼 연기 그리기
		for (int i = 1; i < blast_count; i++) {
			g.setColor(new Color(Util.randColorElement(128, 255), Util.randColorElement(0, 127),
					Util.randColorElement(0, 127)));
			double x0 = Util.rand(-30, 30);
			double y0 = Util.rand(-30, 30);
			double r0 = Util.rand(5, 30);
			g.fillOval((int) ((x - x0 - r0 / 2) + tmpX), (int) (y - y0 - r0 / 2), (int) r0, (int) r0);
		}
	}

	void drawRotateImage(Graphics g) {
		Graphics2D g2d = (Graphics2D) g;
		g2d.setColor(Color.WHITE);
		g2d.rotate(Math.toRadians(degree), (x - width / 2) + width / 2, (y - height / 2) + height / 2);
		g2d.drawImage(image, (int) ((x - width / 2) + tmpX), (int) (y - height / 2), width, height, this);
	}

	// 바운딩박스 생성
	Rectangle getBBox() {
		return new Rectangle((int) (x - Math.abs(width) / 2), (int) (y - Math.abs(height) / 2), Math.abs(width),
				Math.abs(height));
	}

	// 추상 메소드
	abstract void blast();

	abstract void move();

	abstract void draw(Graphics g);
}