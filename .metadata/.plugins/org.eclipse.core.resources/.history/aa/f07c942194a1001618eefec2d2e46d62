package chopLifter;

import java.awt.Graphics;
import java.awt.Image;

public class Missile extends GameObj {
	private double dx, dy; // 미사일이동속도
	private int tmpW, pDir, shotDir;
	private int tmp_counter, inertia_counter; // 관성카운터
	private boolean drop;

	// 생성자
	Missile(Image img, int w, int h) {
		image = img;
		state = ST_DEATH;
		tmpW = w;
		height = h;
	}

	// x, y 위치에서 mx, my 위치로 폭탄 발사
	void shot(double shipX, double shipY, int pDir, int d, int degree) {
		if (state == ST_DEATH) {
			state = ST_ALIVE;
			this.x = shipX;
			this.y = shipY;
			this.pDir = pDir;
			shotDir = d;
			this.degree = degree;
			dx = 0;
			dy = 0;
			tmp_counter = 10;
			drop = true;
		}
	}

	void setInertia() {
		inertia_counter = 50;
	}

	void blast() {
		state = ST_DEATH;
	}

	void move() { // Target을 잃었을 경우 실행
		if (state == ST_ALIVE) {
			if (pDir == GO_LEFT) { // 방향에 따라 이미지의 좌우를 대칭시킨다.
				width = tmpW;
			} else {
				width = -tmpW;
			}

			if (shotDir == 0) { // 전방 발사
				if (pDir == GO_LEFT) {
					dx--;
				} else {
					dx++;
				}
			} else if (shotDir == 1) { // 떨어뜨리기
				if (drop == true && inertia_counter <= 0) { // 관성이 없을때
					// NOP
				} else { // 관성이 있을때 진행방향으로 떨어짐
					drop = false;
					inertia_counter++;
					if (pDir == GO_LEFT) {
						dx -= 0.5;
						width = tmpW;
					} else {
						dx += 0.5;
						width = -tmpW;
					}
				}
				dy++;
			}
			x += dx;
			y += dy;
			inertia_counter--;
		}
		if (x < -tmpW || x > ChopLifter.FRAME_W + tmpW || y < -height || y > ChopLifter.FRAME_H + height) {
			state = ST_DEATH;
			inertia_counter = 0;
		}
	}

	// 그리기
	void draw(Graphics g) {
		if (state == ST_ALIVE) {
			drawImage(g);
		}
	}
}